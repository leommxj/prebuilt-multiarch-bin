name: build

on: 
  push:
    branches:
      - src

env:
  BUILDROOT_VERSION: 2019.11.1
  GDB_VERSION: 8.3.1


jobs:

  build-all: 
    runs-on: ubuntu-18.04
    strategy:
      matrix: 
        TARGET_ARCH: [arm, armeb, aarch64, aarch64_be, mips, mips1, mipsel, mipsel1, mips64, mips64el, powerpc, powerpc64, powerpc64le, riscv64, i586, x86_64]
    env:
      M: ${{ matrix.TARGET_ARCH }}-linux
      TARGET_ARCH: ${{ matrix.TARGET_ARCH }}
    steps:
    - uses: actions/checkout@v2
      with:
        ref: src
    - name: setup
      run: |
       mkdir ${TARGET_ARCH}
       sudo apt-get install texinfo
    - name: run special selector
      run: |
        source src/scripts/selector.sh
    - name: build toolchain
      run: |
        bash src/scripts/buildroot.sh
    - name: build shell
      run: |
        bash src/scripts/shell.sh
    - name: build busybox
      run: |
        bash src/scripts/busybox.sh
    - name: build dropbear
      run: |
        bash src/scripts/dropbear.sh
    - name: build socat
      run: |
        bash src/scripts/build_static.sh socat
    - name: build lsof
      run: |
        bash src/scripts/build_static.sh lsof
    - name: build strace
      run: |
        bash src/scripts/build_static.sh strace
    - name: build tcpdump
      run: |
        bash src/scripts/build_static.sh tcpdump
    - name: build gdb
      run: |
        bash src/scripts/gdb.sh
    - uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.TARGET_ARCH}}
        path: ${{ matrix.TARGET_ARCH}}
    - uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.TARGET_ARCH}}_sdk-buildroot.tar.gz
        path: ${{ matrix.TARGET_ARCH}}_sdk-buildroot.tar.gz


  push-git:
    runs-on: ubuntu-latest
    env:
      GITHUB_ACTOR: ${{github.actor}}
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      GITHUB_REPOSITORY: ${{github.repository}}
    needs: [build-all]
    steps:
    - name: setup
      run: |
        sudo apt-get install tree git
    - uses: actions/checkout@v2
      with:
        ref: master
    - name: rm old binary
      run: |
        rm -r `ls|grep -v README.md` || echo "No binary"
    - uses: actions/download-artifact@v1
      with:
        name: arm
    - uses: actions/download-artifact@v1
      with:
        name: armeb
    - uses: actions/download-artifact@v1
      with:
        name: aarch64
    - uses: actions/download-artifact@v1
      with:
        name: aarch64_be
    - uses: actions/download-artifact@v1
      with:
        name: mips
    - uses: actions/download-artifact@v1
      with:
        name: mips1
    - uses: actions/download-artifact@v1
      with:
        name: mipsel
    - uses: actions/download-artifact@v1
      with:
        name: mipsel1
    - uses: actions/download-artifact@v1
      with:
        name: mips64
    - uses: actions/download-artifact@v1
      with:
        name: mips64el
    - uses: actions/download-artifact@v1
      with:
        name: powerpc
    - uses: actions/download-artifact@v1
      with:
        name: powerpc64
    - uses: actions/download-artifact@v1
      with:
        name: powerpc64le
    - uses: actions/download-artifact@v1
      with:
        name: riscv64
    - uses: actions/download-artifact@v1
      with:
        name: i586
    - uses: actions/download-artifact@v1
      with:
        name: x86_64
    - name: commit and push
      run: |
        ls -al .
        tree .
        find . -path "./src" -prune -o -path "./.*" -prune -o -type f -exec file {} \;
        git config --local user.email "leommxj@gmail.com"
        git config --local user.name "leommxj"
        git add -A .
        git commit -m "compiled" 
        git push "https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
